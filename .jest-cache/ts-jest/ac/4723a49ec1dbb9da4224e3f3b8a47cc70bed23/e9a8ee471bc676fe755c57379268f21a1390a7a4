[["/Users/saclay/Documents/GitHub/AdventureLand/tests/setup.ts",{"fileContent":"console.log('Jest setup loaded');\n","resolvedModuleNames":[]}],["/Users/saclay/Documents/GitHub/AdventureLand/tests/basic.test.ts",{"fileContent":"// tests/basic.test.ts - Super simple test to verify ts-jest is working\n\ndescribe('Basic Jest + TypeScript Test', () => {\n  test('Jest is working', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  test('TypeScript basic types work', () => {\n    const message: string = 'Adventure Land';\n    const count: number = 42;\n    \n    expect(message).toBe('Adventure Land');\n    expect(count).toBe(42);\n  });\n\n  test('Arrays work', () => {\n    const items: string[] = ['Crab', 'Ooze'];\n    expect(items.length).toBe(2);\n    expect(items[0]).toBe('Crab');\n  });\n});\n","resolvedModuleNames":[]}],["/Users/saclay/Documents/GitHub/AdventureLand/tests/configs/enemy-configs.test.ts",{"fileContent":"// tests/configs/enemy-configs.test.ts - Working version for Jest\n\n// Import without .js extension - Jest will resolve with moduleNameMapper\nimport { CRAB_CONFIG, OOZE_CONFIG, getEnemyConfig } from '../../scripts/enemy-configs';\n\ndescribe('Adventure Land Enemy Configurations', () => {\n    describe('CRAB_CONFIG', () => {\n        test('should be defined and have correct type', () => {\n            expect(CRAB_CONFIG).toBeDefined();\n            expect(CRAB_CONFIG.type).toBe('Crab');\n            console.log('✅ CRAB_CONFIG loaded successfully');\n        });\n\n        test('should have valid base stats', () => {\n            const stats = CRAB_CONFIG.baseStats;\n\n            expect(stats).toBeDefined();\n            expect(stats.health).toBeGreaterThan(0);\n            expect(stats.speed).toBeGreaterThan(0);\n            expect(stats.viewDistance).toBeGreaterThan(0);\n            expect(stats.attackDistance).toBeGreaterThan(0);\n\n            console.log('Crab stats:', {\n                health: stats.health,\n                speed: stats.speed,\n                viewDistance: stats.viewDistance,\n                attackDistance: stats.attackDistance\n            });\n        });\n\n        test('should have behaviors array', () => {\n            expect(CRAB_CONFIG.behaviors).toBeDefined();\n            expect(Array.isArray(CRAB_CONFIG.behaviors)).toBe(true);\n            expect(CRAB_CONFIG.behaviors.length).toBeGreaterThan(0);\n\n            console.log(`Crab has ${CRAB_CONFIG.behaviors.length} behaviors`);\n        });\n\n        test('behaviors should have valid structure', () => {\n            CRAB_CONFIG.behaviors.forEach((behavior, index) => {\n                expect(behavior.name).toBeDefined();\n                expect(typeof behavior.name).toBe('string');\n                expect(behavior.duration).toBeDefined();\n                expect(Array.isArray(behavior.duration)).toBe(true);\n                expect(behavior.duration.length).toBe(2);\n                expect(behavior.weight).toBeGreaterThan(0);\n                expect(Array.isArray(behavior.actions)).toBe(true);\n\n                console.log(`Behavior ${index}: ${behavior.name} (weight: ${behavior.weight})`);\n            });\n        });\n    });\n\n    describe('OOZE_CONFIG', () => {\n        test('should be defined and have correct type', () => {\n            expect(OOZE_CONFIG).toBeDefined();\n            expect(OOZE_CONFIG.type).toBe('Ooze');\n            console.log('✅ OOZE_CONFIG loaded successfully');\n        });\n\n        test('should have different stats than Crab', () => {\n            const crabStats = CRAB_CONFIG.baseStats;\n            const oozeStats = OOZE_CONFIG.baseStats;\n\n            // At least one stat should be different\n            const different =\n                crabStats.health !== oozeStats.health ||\n                crabStats.speed !== oozeStats.speed ||\n                crabStats.viewDistance !== oozeStats.viewDistance ||\n                crabStats.attackDistance !== oozeStats.attackDistance;\n\n            expect(different).toBe(true);\n            console.log('✅ Ooze and Crab have different stats');\n        });\n    });\n\n    describe('getEnemyConfig function', () => {\n        test('should return Crab config for \"Crab\"', () => {\n            const result = getEnemyConfig('Crab');\n            expect(result).toEqual(CRAB_CONFIG);\n            console.log('✅ getEnemyConfig(\"Crab\") works');\n        });\n\n        test('should return Ooze config for \"Ooze\"', () => {\n            const result = getEnemyConfig('Ooze');\n            expect(result).toEqual(OOZE_CONFIG);\n            console.log('✅ getEnemyConfig(\"Ooze\") works');\n        });\n\n        test('should return null for invalid enemy types', () => {\n            expect(getEnemyConfig('InvalidEnemy')).toBeNull();\n            expect(getEnemyConfig('')).toBeNull();\n            expect(getEnemyConfig('crab')).toBeNull(); // case sensitive\n\n            console.log('✅ getEnemyConfig rejects invalid types');\n        });\n\n        test('should handle null and undefined', () => {\n            // Use type assertions to test edge cases\n            expect(getEnemyConfig(null as any)).toBeNull();\n            expect(getEnemyConfig(undefined as any)).toBeNull();\n\n            console.log('✅ getEnemyConfig handles null/undefined');\n        });\n    });\n\n    describe('Configuration Validation', () => {\n        test('all enemy configs should have required properties', () => {\n            const configs = [CRAB_CONFIG, OOZE_CONFIG];\n\n            configs.forEach(config => {\n                // Basic validation\n                expect(config.type).toBeDefined();\n                expect(typeof config.type).toBe('string');\n                expect(config.type.length).toBeGreaterThan(0);\n\n                expect(config.baseStats).toBeDefined();\n                expect(typeof config.baseStats.health).toBe('number');\n                expect(typeof config.baseStats.speed).toBe('number');\n\n                expect(Array.isArray(config.behaviors)).toBe(true);\n                expect(config.behaviors.length).toBeGreaterThan(0);\n\n                console.log(`✅ ${config.type} config validation passed`);\n            });\n        });\n\n        test('behavior weights should be reasonable', () => {\n            const configs = [CRAB_CONFIG, OOZE_CONFIG];\n\n            configs.forEach(config => {\n                let totalWeight = 0;\n\n                config.behaviors.forEach(behavior => {\n                    expect(behavior.weight).toBeGreaterThan(0);\n                    expect(behavior.weight).toBeLessThan(100);\n                    totalWeight += behavior.weight;\n                });\n\n                expect(totalWeight).toBeGreaterThan(0);\n                expect(totalWeight).toBeLessThan(1000);\n\n                console.log(`${config.type} total weight: ${totalWeight}`);\n            });\n        });\n    });\n});","resolvedModuleNames":["/Users/saclay/Documents/GitHub/AdventureLand/scripts/enemy-configs.ts"]}],["/Users/saclay/Documents/GitHub/AdventureLand/scripts/enemy-configs.ts",{"fileContent":"// enemy-configs.ts - Enemy Configuration Data\n\n// ===== TYPE DEFINITIONS =====\nexport interface BehaviorCondition {\n  type: \"distance\" | \"health\" | \"timer\" | \"random\" | \"hurt\";\n  operator: \"<\" | \">\" | \"<=\" | \">=\" | \"==\";\n  value: number;\n}\n\nexport interface ActionConfig {\n  type: \"move\" | \"animate\" | \"sound\" | \"invulnerable\";\n  params: {\n    pattern?: \"toward_player\" | \"away_from_player\" | \"random\" | \"stop\" | \"sideways_left\" | \"sideways_right\" | \"crab_toward_player\";\n    speed?: number;\n    name?: string;\n    duration?: number;\n  };\n}\n\nexport interface BehaviorConfig {\n  name: string;\n  duration: [number, number];\n  weight: number;\n  cooldown?: number;\n  conditions?: BehaviorCondition[];\n  actions: ActionConfig[];\n}\n\nexport interface EnemyConfig {\n  type: string;\n  baseStats: {\n    health: number;\n    speed: number;\n    viewDistance: number;\n    attackDistance: number;\n  };\n  behaviors: BehaviorConfig[];\n}\n\nexport interface EnemyData {\n  maskUid: number;\n  type: string;\n  state: string;\n  stateTimer: number;\n  direction: string;\n  config: EnemyConfig;\n  currentBehavior: BehaviorConfig;\n  lastPlayerDistance: number;\n  behaviorCooldowns: Map<string, number>;\n  behaviorStarted: boolean;\n  isHurt: boolean;\n  invulnerableTimer: number;\n  sidewaysDirection: string;\n}\n\n// ===== ENEMY CONFIGURATIONS =====\nexport const OOZE_CONFIG: EnemyConfig = {\n  type: \"Ooze\",\n  baseStats: {\n    health: 2,\n    speed: 15,\n    viewDistance: 120,\n    attackDistance: 0\n  },\n  behaviors: [\n    {\n      name: \"idle\",\n      duration: [1.0, 2.0],\n      weight: 4,\n      actions: [\n        { type: 'animate', params: { name: 'Idle_${direction}' } },\n        { type: 'move', params: { pattern: 'toward_player', speed: 20 } }\n      ]\n    },\n    {\n      name: \"hop\",\n      duration: [0.8, 1.2],\n      weight: 2,\n      cooldown: 2.0,\n      conditions: [\n        { type: 'distance', operator: '<', value: 250 }\n      ],\n      actions: [\n        { type: 'animate', params: { name: 'Hop_${direction}' } },\n        { type: 'move', params: { pattern: 'toward_player', speed: 50 } },\n        { type: 'sound', params: { name: 'Slime_Jump' } }\n      ]\n    }\n  ]\n};\n\nexport const CRAB_CONFIG: EnemyConfig = {\n  type: \"Crab\",\n  baseStats: {\n    health: 3,\n    speed: 20,\n    viewDistance: 150,\n    attackDistance: 32\n  },\n  behaviors: [\n    {\n      name: \"idle\",\n      duration: [0.5, 1.5],\n      weight: 2,\n      conditions: [\n        { type: 'distance', operator: '>', value: 120 }\n      ],\n      actions: [\n        { type: 'animate', params: { name: 'Idle' } }\n      ]\n    },\n    {\n      name: \"cranky_chase\",\n      duration: [1.5, 3.0],\n      weight: 6,\n      conditions: [\n        { type: 'distance', operator: '<', value: 120 },\n        { type: 'distance', operator: '>=', value: 32 }\n      ],\n      actions: [\n        { type: 'animate', params: { name: 'Cranky_${direction}' } },\n        { type: 'move', params: { pattern: 'crab_toward_player', speed: 30 } },\n        { type: 'sound', params: { name: 'Crab Walk' } }\n      ]\n    },\n    {\n      name: \"shell_retreat\",\n      duration: [1.0, 1.5],\n      weight: 2,\n      cooldown: 3.0,\n      conditions: [\n        { type: 'random', operator: '<', value: 30 }\n      ],\n      actions: [\n        { type: 'animate', params: { name: 'Retreat_Right' } },\n        { type: 'move', params: { pattern: 'stop', speed: 0 } }\n      ]\n    },\n    {\n      name: \"hurt_flash\",\n      duration: [0.2, 0.2],\n      weight: 15,\n      cooldown: 0.1,\n      conditions: [\n        { type: 'hurt', operator: '==', value: 1 }\n      ],\n      actions: [\n        { type: 'animate', params: { name: 'Hurt' } },\n        { type: 'move', params: { pattern: 'stop', speed: 0 } }\n      ]\n    },\n    {\n      name: \"hurt_shell\",\n      duration: [1.0, 1.0],\n      weight: 15,\n      cooldown: 5.0,\n      conditions: [\n        { type: 'distance', operator: '<', value: 999 }\n      ],\n      actions: [\n        { type: 'animate', params: { name: 'Retreat_${direction}' } },\n        { type: 'move', params: { pattern: 'stop', speed: 0 } },\n        { type: 'invulnerable', params: { duration: 1.0 } }\n      ]\n    },\n    {\n      name: \"attack\",\n      duration: [0.8, 1.2],\n      weight: 10,\n      cooldown: 1.5,\n      conditions: [\n        { type: 'distance', operator: '<', value: 32 }\n      ],\n      actions: [\n        { type: 'animate', params: { name: 'Attack_${direction}' } },\n        { type: 'move', params: { pattern: 'toward_player', speed: 40 } },\n        { type: 'sound', params: { name: 'CrabAttack' } }\n      ]\n    }\n  ]\n};\n\n\nexport function getEnemyConfig(type: string | null | undefined): EnemyConfig | null {\n  // Handle null, undefined, and empty string cases\n  if (!type || typeof type !== 'string' || type.trim() === '') {\n    console.error('❌ Invalid enemy type provided:', type);\n    return null;\n  }\n\n  // Convert to lowercase for case-insensitive comparison (or keep case-sensitive)\n  const enemyType = type.trim();\n\n  switch (enemyType) {\n    case 'Crab':\n      return CRAB_CONFIG;\n    case 'Ooze':\n      return OOZE_CONFIG;\n    default:\n      console.error(`❌ Unknown enemy type: ${enemyType}`);\n      return null;\n  }\n}","resolvedModuleNames":[]}],["/Users/saclay/Documents/GitHub/AdventureLand/tests/simple.test.ts",{"fileContent":"// tests/simple.test.ts - Minimal test to verify Jest + TypeScript working\n\ndescribe('Jest + TypeScript Setup', () => {\n    test('basic functionality works', () => {\n        expect(1 + 1).toBe(2);\n        console.log('✅ Jest is working');\n    });\n\n    test('TypeScript syntax works', () => {\n        const testObj: { name: string; count: number } = {\n            name: 'Adventure Land',\n            count: 42\n        };\n\n        expect(testObj.name).toBe('Adventure Land');\n        expect(testObj.count).toBe(42);\n        console.log('✅ TypeScript syntax working in Jest');\n    });\n\n    test('can handle type assertions', () => {\n        const value: unknown = 'hello';\n        const str = value as string;\n\n        expect(str).toBe('hello');\n        expect(typeof str).toBe('string');\n        console.log('✅ TypeScript type assertions working');\n    });\n});","resolvedModuleNames":[]}]]